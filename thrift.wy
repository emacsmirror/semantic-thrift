;;; thrift.wy -- LALR grammar for thrift

;;; Commentary:
;;
;; This grammar fully parses correct apache thrift 0.17.0 syntax.
;;
;; It is based on the grammar for thrift version 0.17.0

%package wisent-thrift-wy
%provide thrift-wy

%{
(declare-function semantic-parse-region "semantic"
                  (start end &optional nonterminal depth returnonerror))
}

%languagemode thrift-mode

;; The default goal.
%start Program
%start HeaderList
%start Struct

;;; lexer
%type <paren> syntax "\\([][{()}]\\)" matchdatatype string
%token <paren> tok_lparen      "("
%token <paren> tok_rparen      ")"
%token <paren> tok_lbrace      "{"
%token <paren> tok_rbrace      "}"
%token <paren> tok_lbrack      "["
%token <paren> tok_rbrack      "]"

;; Operator terminals
%type  <punctuation> ;;syntax "\\(\\s.\\|\\s$\\|\\s'\\)+" matchdatatype string

%token <punctuation> tok_not         "!"
%token <punctuation> tok_noteq       "!="
%token <punctuation> tok_mod         "%"
%token <punctuation> tok_modeq       "%="
%token <punctuation> tok_and         "&"
%token <punctuation> tok_andand      "&&"
%token <punctuation> tok_andeq       "&="
%token <punctuation> tok_mult        "*"
%token <punctuation> tok_multeq      "*="
%token <punctuation> tok_plus        "+"
%token <punctuation> tok_plusplus    "++"
%token <punctuation> tok_pluseq      "+="
%token <punctuation> tok_comma       ","
%token <punctuation> tok_minus       "-"
%token <punctuation> tok_minusminus  "--"
%token <punctuation> tok_minuseq     "-="
%token <punctuation> tok_dot         "."
%token <punctuation> tok_div         "/"
%token <punctuation> tok_diveq       "/="
%token <punctuation> tok_colon       ":"
%token <punctuation> tok_semicolon   ";"
%token <punctuation> tok_lt          "<"
%token <punctuation> tok_lshift      "<<"
%token <punctuation> tok_lshifteq    "<<="
%token <punctuation> tok_lteq        "<="
%token <punctuation> tok_eq          "="
%token <punctuation> tok_eqeq        "=="
%token <punctuation> tok_gt          ">"
%token <punctuation> tok_gteq        ">="
%token <punctuation> tok_rshift      ">>"
%token <punctuation> tok_rshifteq    ">>="
%token <punctuation> tok_urshift     ">>>"
%token <punctuation> tok_urshifteq   ">>>="
%token <punctuation> tok_question    "?"
%token <punctuation> tok_xor         "^"
%token <punctuation> tok_xoreq       "^="
%token <punctuation> tok_or          "|"
%token <punctuation> tok_oreq        "|="
%token <punctuation> tok_oror        "||"
%token <punctuation> tok_comp        "~"
%token <punctuation> tok_ellipsis    "..."
%token <punctuation> tok_at          "@"

;; Constant values
%type <int_constant> syntax "\\([+-]?[0-9]+\\)" matchdatatype regexp
%token <int_constant> tok_int_constant
%type <dub_constant> syntax "\\([+-]?[0-9]+\\(\.[0-9]+\\)?\\([eE][+-]?[0-9]+\\)?\\)" matchdatatype regexp
%token <dub_constant> tok_dub_constant

;; Literal terminals
%type <symbol>      ;; syntax "\\(\\sw\\|\\s_\\)+"
%token <symbol>     tok_boolean_literal "\\`false\\'"
%token <symbol>     tok_boolean_literal "\\`true\\'"
%token <symbol>     tok_identifier

%type <string>      ;; syntax "\\s\"" matchdatatype sexp
%token <string>     tok_literal

;; Generate a keyword analyzer
%type <keyword> ;; syntax "\\(\\sw\\|\\s_\\)+" matchdatatype keyword

;; Header keywords
%keyword tok_include		"include"
%put     tok_include summary
"Include other thrift file: include \"name\""

%keyword tok_namespace		"namespace"
%put     tok_namespace summary
"Namespace of current file"

%keyword tok_cpp_include	"cpp_include"
%keyword tok_cpp_type		"cpp_type"
%keyword tok_xsd_all		"xsd_all"
%keyword tok_xsd_optional	"xsd_optional"
%keyword tok_xsd_nillable	"xsd_nillable"
%keyword tok_xsd_attrs		"xsd_attrs"

;; Base datatype keywords
%keyword tok_void		"void"
%keyword tok_bool		"bool"
%keyword tok_string		"string"
%keyword tok_binary		"binary"
%keyword tok_uuid		"uuid"
%keyword tok_byte		"byte"
%keyword tok_i8			"i8"
%keyword tok_i16		"i16"
%keyword tok_i32		"i32"
%keyword tok_i64		"i64"
%keyword tok_double		"double"

;; Complex type keywords
%keyword tok_map		"map"
%keyword tok_list		"list"
%keyword tok_set		"set"

;; Function modifiers
%keyword tok_oneway		"oneway"
%keyword tok_async		"async"

;; Thrift language keywords
%keyword tok_typedef		"typedef"
%keyword tok_struct		"struct"

%put     tok_struct summary
"Define struct: struct {}"

%keyword tok_xception		"xception"
%keyword tok_throws		"throws"
%keyword tok_extends		"extends"
%keyword tok_service		"service"
%keyword tok_enum		"enum"
%keyword tok_const		"const"
%keyword tok_required		"required"
%keyword tok_optional		"optional"
%keyword tok_union		"union"
%keyword tok_reference		"reference"

%%

;; Thrift Grammar Implementation.
;;
;; For the most part this source file works its way top down from what you
;; might expect to find in a typical .thrift file, i.e. type definitions and
;; namespaces up top followed by service definitions using those types.
Program:
    HeaderList DefinitionList
  ;

CaptureDocText:
  ;

DestroyDocText:
  ;

;; We have to DestroyDocText here, otherwise it catches the doctext
;; on the first real element.
HeaderList:
    HeaderList DestroyDocText Header
  | ;;EMPTY
  ;


Header:
    Include
  | tok_namespace tok_identifier tok_identifier TypeAnnotations
  | tok_namespace tok_mult tok_identifier
  | tok_cpp_include tok_literal
  ;

Include:
    tok_include tok_literal
  ;

DefinitionList:
    DefinitionList CaptureDocText Definition
  | ;;EMPTY
  ;

Definition:
    Const
  | TypeDefinition
  | Service
  ;

TypeDefinition:
    Typedef
  | Enum
  | Struct
  | Xception
  ;

CommaOrSemicolonOptional:
    tok_comma
  | tok_semicolon
  | ;;EMPTY
  ;

Typedef:
    tok_typedef FieldType tok_identifier TypeAnnotations CommaOrSemicolonOptional
  ;

Enum:
    tok_enum tok_identifier tok_lbrace EnumDefList tok_rbrace TypeAnnotations
  ;

EnumDefList:
    EnumDefList EnumDef
  | ;;EMPTY
  ;

EnumDef:
    CaptureDocText EnumValue TypeAnnotations CommaOrSemicolonOptional
  ;

EnumValue:
    tok_identifier tok_eq tok_int_constant
  | tok_identifier
  ;

Const:
    tok_const FieldType tok_identifier tok_eq ConstValue CommaOrSemicolonOptional
  ;

ConstValue:
    tok_int_constant
  | tok_boolean_literal
  | tok_dub_constant
  | tok_literal
  | tok_identifier
  | ConstList
  | ConstMap
  ;

ConstList:
    tok_lbrack ConstListContents tok_rbrack
  ;


ConstListContents:
    ConstListContents ConstValue CommaOrSemicolonOptional
  | ;;EMPTY
  ;

ConstMap:
    tok_lbrace ConstMapContents tok_rbrace
  ;

ConstMapContents:
    ConstMapContents ConstValue tok_colon ConstValue CommaOrSemicolonOptional
  | ;;EMPTY
  ;

StructHead:
    tok_struct
  | tok_union
  ;

Struct:
    StructHead tok_identifier XsdAll tok_lbrace FieldList tok_rbrace TypeAnnotations
  ;

XsdAll:
    tok_xsd_all
  | ;;EMPTY
  ;

XsdOptional:
    tok_xsd_optional
  | ;;EMPTY
  ;

XsdNillable:
    tok_xsd_nillable
  | ;;EMPTY
  ;

XsdAttributes:
    tok_xsd_attrs tok_lbrace FieldList tok_rbrace
  | ;;EMPTY
  ;

Xception:
    tok_xception tok_identifier tok_lbrace FieldList tok_rbrace TypeAnnotations
  ;

Service:
    tok_service tok_identifier Extends tok_lbrace FlagArgs FunctionList UnflagArgs tok_rbrace TypeAnnotations
  ;

FlagArgs:
  ;

UnflagArgs:
  ;

Extends:
    tok_extends tok_identifier
  | ;;EMPTY
  ;

FunctionList:
    FunctionList Function
  | ;;EMPTY
  ;

Function:
    CaptureDocText Oneway FunctionType tok_identifier tok_lparen FieldList tok_rparen Throws TypeAnnotations CommaOrSemicolonOptional
  ;

Oneway:
    tok_oneway
  |  tok_async  ;; deprecated
  | ;;EMPTY
  ;

Throws:
    tok_throws tok_lparen FieldList tok_rparen
  | ;;EMPTY
  ;

FieldList:
    FieldList Field
  | ;;EMPTY
  ;

Field:
    CaptureDocText FieldIdentifier FieldRequiredness FieldType FieldReference FieldName FieldValue XsdOptional XsdNillable XsdAttributes TypeAnnotations CommaOrSemicolonOptional
  ;

;; identifiers and everything that could be one if it would not be identified as
;; a different token already and excluding the "xsd*" keywords to follow a
;; FieldName
FieldName:
    tok_identifier
  | tok_namespace
  | tok_cpp_include
  | tok_cpp_type
  | tok_include
  | tok_void
  | tok_bool
  | tok_byte
  | tok_i8
  | tok_i16
  | tok_i32
  | tok_i64
  | tok_double
  | tok_string
  | tok_binary
  | tok_uuid
  | tok_map
  | tok_list
  | tok_set
  | tok_oneway
  | tok_async
  | tok_typedef
  | tok_struct
  | tok_union
  | tok_xception
  | tok_extends
  | tok_throws
  | tok_service
  | tok_enum
  | tok_const
  | tok_required
  | tok_optional
  ;


FieldIdentifier:
    tok_int_constant tok_colon
  | ;;EMPTY
  ;

FieldReference:
    tok_reference
  | ;;EMPTY
  ;

FieldRequiredness:
    tok_required
  | tok_optional
  | ;;EMPTY
  ;

FieldValue:
    tok_eq ConstValue
  | ;;EMPTY
  ;

FunctionType:
    FieldType
  | tok_void
  ;

FieldType:
    tok_identifier
  | BaseType
  | ContainerType
  ;

BaseType:
    SimpleBaseType TypeAnnotations
  ;

SimpleBaseType:
    tok_string
  | tok_binary
  | tok_uuid
  | tok_bool
  | tok_byte
  | tok_i8
  | tok_i16
  | tok_i32
  | tok_i64
  | tok_double
  ;

ContainerType:
    SimpleContainerType TypeAnnotations
  ;

SimpleContainerType:
    MapType
  | SetType
  | ListType
  ;

MapType:
    tok_map CppType tok_lt FieldType tok_comma FieldType tok_gt
  ;

SetType:
    tok_set CppType tok_lt FieldType tok_gt
  ;

ListType:
    tok_list CppType tok_lt FieldType tok_gt
  ;

CppType:
    tok_cpp_type tok_literal
  | ;;EMPTY
  ;

TypeAnnotations:
    tok_lparen TypeAnnotationList tok_rparen
  | ;;EMPTY
  ;

TypeAnnotationList:
    TypeAnnotationList TypeAnnotation
  | ;;EMPTY
  ;

TypeAnnotation:
    tok_identifier TypeAnnotationValue CommaOrSemicolonOptional
  ;

TypeAnnotationValue:
    tok_eq tok_literal
  | ;;EMPTY
  ;

%%

;; Define the lexer for this grammar
(define-lex wisent-thrift-lexer
  "Lexical analyzer that handles Thrift buffers.
It ignores whitespaces, newlines and comments."
  semantic-lex-ignore-whitespace
  semantic-lex-ignore-newline
  semantic-lex-ignore-comments
  ;;;; Auto-generated analyzers.
  wisent-thrift-wy--<int_constant>-regexp-analyzer
  wisent-thrift-wy--<dub_constant>-regexp-analyzer
  wisent-thrift-wy--<string>-sexp-analyzer
  ;; Must detect keywords before other symbols
  wisent-thrift-wy--<keyword>-keyword-analyzer
  wisent-thrift-wy--<symbol>-regexp-analyzer
  wisent-thrift-wy--<punctuation>-string-analyzer
  wisent-thrift-wy--<paren>-string-analyzer
  ;;;;
  semantic-lex-default-action)

;;; thrift.wy ends here
